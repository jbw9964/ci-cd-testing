# Workflow 이름
name: CI with Gradle

# 트리거 이벤트
on:
  pull_request:
    branches: [ "main", "master", "develop", "release" ]

# 테스트 결과 작성을 위해 쓰기 권한 추가
permissions: write-all

# 실행
jobs:
  build:
    runs-on: ubuntu-latest

    # 실행 스텝
    steps:

      # workflow 가 repo 에 접근하기 위한 Marketplace action
      - uses: actions/checkout@v4.2.2

      - name: Set up JDK 17
        uses: actions/setup-java@v4.5.0
        with:
          java-version: '17'
          distribution: 'oracle'  # 그냥 Oracle JDK


      # gradle 캐시해서 빌드 시간 단축
      - name: Gradle caching
        uses: actions/cache@v4.1.2
        with:
          # cache 저장할 폴더 설정
          path: |
            App1/.gradle/caches
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          restore-keys:
            ${{ runner.os }}-gradle-


      # gradlew 실행 권한 부여
      - name: Grant Execute Permission For Gradlew
        run: |
          cd App1
          chmod +x ./gradlew

      # test 없이 그냥 build
      - name: Build with Gradle
        run: |
          cd App1
          ./gradlew build -x test --build-cache

      # 테스트 실행
      - name: Run Tests
        run: |
          cd App1
          ./gradlew --info test

      # 우리 repo 디렉토리는 ~/ 아니라 그냥 ./ 임
      - name: Show CWD Properties
        run: |
          echo "Current directory : `pwd`"
          ls -al
          echo 'tree ./'
          tree ./ -a

      # Pull Request 코멘트에 테스트 결과 댓글 달기
      - name: Publish Unit Test Results To PR Comment
        uses: EnricoMi/publish-unit-test-result-action@v2.18.0
        if: ${{ always() }}   # 앞에 step 이 fail 해도 실행
        with:
          files: App1/build/test-results/**/*.xml


      # 테스트 실패한 부분 PR Code Review 에 주석 달기
      - name: Add Failed Test Annotation to PR Code Review
        uses: mikepenz/action-junit-report@v5
        if: success() || failure()  # 앞에 step 이 fail 해도 실행
        with:
          # test report 위치
          report_paths: '**/build/test-results/test/*.xml'
          require_tests: true
