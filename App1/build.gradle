//file:noinspection GroovyAssignabilityCheck
// warning 비활성화

plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'

    // sonar cloud 분석 위한 plugin
    id "org.sonarqube" version "5.1.0.4882"

    // 테코 커버리지 분석
    id 'jacoco'
}

// gradlew 에 sonar task 구성
sonar {
    properties {
        property "sonar.projectKey", "jbw9964_ci-cd-testing"
        property "sonar.organization", "jbw9964-1"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.language", "java"
        property "sonar.sourceEncoding", "UTF-8"
        property "sonar.sources", "src/main/java"
        property "sonar.tests", "src/test/java"
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.coverage.exclusions", "**/dto/**, **/event/**, **/*InitData*, **/*Application*, **/exception/**, **/service/alarm/**, **/aop/**, **/config/**, **/MemberRole*"

    }
}

// jacocoTestReport 구성
jacocoTestReport {
    dependsOn test  // test 작업 실행 후 report 구성

    // report 양식 enable
    reports {
        html.required = true
        xml.required = true
        csv.required = true
    }

    // coverage 에 포함시키지 않을 항목들
    // QueryDSL 로 만들어진거 나중에 포함해야 함
    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    "**/*Application*"
            ])
        }))
    }

    // 여기서 exclude 시켜야 불필요한 항목들 coverage 분석 안함
    // jacocoTestCoverageVerification 에서 exclude 하면
    // verification 실패 항목에서만 배제하는 거
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport  // jacocoTestReport 실행 후 verify
    violationRules {
        rule {
            element = 'CLASS'

            // if-else 분기점 coverage
            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            // 순수 line coverage
            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            // method coverage
            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            // verification 에서 배제할 항목들
            excludes = [
                    "**.*Application*"
            ]
        }
    }
}

group = 'core'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()

    // test 실패한거 있어도 OS 에 0 코드 제공
    ignoreFailures = true

    // test 실행 후 jacocoTestReport 반드시 실행
    finalizedBy 'jacocoTestReport'
}

// plain snapshot 생성 X
jar {
    enabled = false
}
