plugins {
    id 'java'
    id 'org.springframework.boot' version '3.3.5'
    id 'io.spring.dependency-management' version '1.1.6'

    // sonar cloud 분석 위한 plugin
    id "org.sonarqube" version "5.1.0.4882"

    // 테코 커버리지 분석
    id 'jacoco'
}

sonar {
    properties {
        property "sonar.projectKey", "jbw9964_ci-cd-testing"
        property "sonar.organization", "jbw9964-1"
        property "sonar.host.url", "https://sonarcloud.io"
//        property "sonar.language", "java"
//        property "sonar.sourceEncoding", "UTF-8"
//        property "sonar.sources", "src/main/java"
//        property "sonar.tests", "src/test/java"
        property 'sonar.coverage.jacoco.xmlReportPaths', 'build/reports/jacoco/test/jacocoTestReport.xml'
//        property "sonar.test.inclusions", "**/*Test.java"
        property "sonar.coverage.exclusions", "**/dto/**, **/event/**, **/*InitData*, **/*Application*, **/exception/**, **/service/alarm/**, **/aop/**, **/config/**, **/MemberRole*"

    }
}

jacocoTestReport {
    dependsOn test
    reports {
        // 원하는 리포트를 켜고 끌 수 있습니다.
        html.required = true
        xml.required = true
        csv.required = true
    }

    afterEvaluate {
        classDirectories.setFrom(files(classDirectories.files.collect {
            fileTree(dir: it, excludes: [
                    "**/*Application*"
            ])
        }))
    }
}

jacocoTestCoverageVerification {
    dependsOn jacocoTestReport
    // 이 커버리지 기준은 이 글의 맨 아래에서 다시 설명하겠습니다.
    violationRules {
        rule {
            element = 'CLASS'

            limit {
                counter = 'BRANCH'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            limit {
                counter = 'LINE'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            limit {
                counter = 'METHOD'
                value = 'COVEREDRATIO'
                minimum = 0.80
            }

            excludes = [
                    "**.*Application*"
            ]
        }
    }
}

group = 'core'
version = '0.0.1-SNAPSHOT'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17)
    }
}

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'org.springframework.boot:spring-boot-starter-webflux'
    compileOnly 'org.projectlombok:lombok'
    runtimeOnly 'com.h2database:h2'
    runtimeOnly 'com.mysql:mysql-connector-j'
    annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation 'io.projectreactor:reactor-test'
    testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
}

tasks.named('test') {
    useJUnitPlatform()

    // test 실패한거 있어도 OS 에 0 코드 제공
    ignoreFailures = true

    // test 실행 후 jacocoTestReport 반드시 실행
    finalizedBy 'jacocoTestReport'
}

//task testCoverage(type: Test) {
//    group 'verification'
//    description 'Runs the unit tests with coverage'
//
//    dependsOn(
//            ':test',
//            ':jacocoTestReport',
////            ':jacocoTestCoverageVerification'
//    )
//
//    tasks['jacocoTestReport'].mustRunAfter(tasks['test'])
////    tasks['jacocoTestCoverageVerification'].mustRunAfter(tasks['jacocoTestReport'])
//}

// plain snapshot 생성 X
jar {
    enabled = false
}
